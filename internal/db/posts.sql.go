// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO
    posts (content, title, user_id, tags)
VALUES
    ($1, $2, $3, $4)
RETURNING
    id, title, user_id, content, created_at, updated_at, tags, version
`

type CreatePostParams struct {
	Content string   `json:"content"`
	Title   string   `json:"title"`
	UserID  int64    `json:"user_id"`
	Tags    []string `json:"tags"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Content,
		arg.Title,
		arg.UserID,
		pq.Array(arg.Tags),
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
		&i.Version,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE
    id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllFeed = `-- name: GetAllFeed :many
SELECT
    id, title, user_id, content, created_at, updated_at, tags, version
FROM
    posts
ORDER BY
    created_at DESC
LIMIT
    $1
OFFSET
    $2
`

type GetAllFeedParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFeed(ctx context.Context, arg GetAllFeedParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeed, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.UserID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			pq.Array(&i.Tags),
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT
    id, title, user_id, content, created_at, updated_at, tags, version
FROM
    posts
WHERE
    id = $1
`

func (q *Queries) GetPostByID(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
		&i.Version,
	)
	return i, err
}

const getUserFeed = `-- name: GetUserFeed :many
SELECT
    p.id,
    p.user_id,
    p.title,
    p."content",
    p.created_at,
    p."version",
    p.tags,
    u.username,
    COUNT(c.id) AS comments_count
FROM
    posts p
    JOIN comments c ON c.post_id = p.id
    JOIN users u ON u.id = p.user_id
    JOIN followers f ON f.user_id = p.user_id
WHERE
    f.follower_id = $1
    OR p.user_id = $1
    AND (
        p.title ILIKE '%' || $4 || '%'
        OR p.content ILIKE '%' || $4 || '%'
    )
    AND (
        p.tags @> $5
        OR $5 IS NULL
    )
GROUP BY
    p.id,
    u.username
ORDER BY
    p.created_at DESC
LIMIT
    $2
OFFSET
    $3
`

type GetUserFeedParams struct {
	FollowerID int64          `json:"follower_id"`
	Limit      int32          `json:"limit"`
	Offset     int32          `json:"offset"`
	Column4    sql.NullString `json:"column_4"`
	Tags       []string       `json:"tags"`
}

type GetUserFeedRow struct {
	ID            int64         `json:"id"`
	UserID        int64         `json:"user_id"`
	Title         string        `json:"title"`
	Content       string        `json:"content"`
	CreatedAt     time.Time     `json:"created_at"`
	Version       sql.NullInt32 `json:"version"`
	Tags          []string      `json:"tags"`
	Username      string        `json:"username"`
	CommentsCount int64         `json:"comments_count"`
}

func (q *Queries) GetUserFeed(ctx context.Context, arg GetUserFeedParams) ([]GetUserFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeed,
		arg.FollowerID,
		arg.Limit,
		arg.Offset,
		arg.Column4,
		pq.Array(arg.Tags),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFeedRow{}
	for rows.Next() {
		var i GetUserFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Version,
			pq.Array(&i.Tags),
			&i.Username,
			&i.CommentsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET
    title = $1,
    content = $2,
    "version" = "version" + 1
WHERE
    id = $3
    AND "version" = $4
RETURNING
    id, title, user_id, content, created_at, updated_at, tags, version
`

type UpdatePostParams struct {
	Title   string        `json:"title"`
	Content string        `json:"content"`
	ID      int64         `json:"id"`
	Version sql.NullInt32 `json:"version"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.Title,
		arg.Content,
		arg.ID,
		arg.Version,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
		&i.Version,
	)
	return i, err
}
