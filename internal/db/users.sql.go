// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username, email, password, role_id)
VALUES
    (
        $1,
        $2,
        $3,
        (
            SELECT
                id
            FROM
                roles
            WHERE
                name = $4
        )
    )
RETURNING
    id, email, username, password, created_at, is_verified, role_id
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password []byte `json:"password"`
	Name     string `json:"name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.IsVerified,
		&i.RoleID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id, email, username, password, created_at, is_verified, role_id
FROM
    users
WHERE
    email = $1
    AND is_verified = TRUE
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.IsVerified,
		&i.RoleID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, email, username, password, created_at, is_verified, role_id
FROM
    users
WHERE
    users.id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.IsVerified,
		&i.RoleID,
	)
	return i, err
}

const getUserFromInvitation = `-- name: GetUserFromInvitation :one
SELECT
    u.id,
    u.username,
    u.email,
    u.created_at,
    u.is_verified
FROM
    users u
    JOIN user_verifications uv ON u.id = uv.user_id
WHERE
    uv.token = $1
    AND uv.expiry > $2
`

type GetUserFromInvitationParams struct {
	Token  []byte    `json:"token"`
	Expiry time.Time `json:"expiry"`
}

type GetUserFromInvitationRow struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	CreatedAt  time.Time `json:"created_at"`
	IsVerified bool      `json:"is_verified"`
}

func (q *Queries) GetUserFromInvitation(ctx context.Context, arg GetUserFromInvitationParams) (GetUserFromInvitationRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFromInvitation, arg.Token, arg.Expiry)
	var i GetUserFromInvitationRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.IsVerified,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = $1,
    email = $2,
    is_verified = $3
WHERE
    id = $4
RETURNING
    id, email, username, password, created_at, is_verified, role_id
`

type UpdateUserParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	IsVerified bool   `json:"is_verified"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.IsVerified,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.IsVerified,
		&i.RoleID,
	)
	return i, err
}
