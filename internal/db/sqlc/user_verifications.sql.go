// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_verifications.sql

package sqlc

import (
	"context"
	"time"
)

const createUserVerification = `-- name: CreateUserVerification :one
INSERT INTO
    user_verifications (token, user_id, expiry)
VALUES
    ($1, $2, $3)
RETURNING
    token, user_id, expiry
`

type CreateUserVerificationParams struct {
	Token  []byte    `json:"token"`
	UserID int64     `json:"user_id"`
	Expiry time.Time `json:"expiry"`
}

func (q *Queries) CreateUserVerification(ctx context.Context, arg CreateUserVerificationParams) (UserVerification, error) {
	row := q.db.QueryRowContext(ctx, createUserVerification, arg.Token, arg.UserID, arg.Expiry)
	var i UserVerification
	err := row.Scan(&i.Token, &i.UserID, &i.Expiry)
	return i, err
}

const deleteUserVerification = `-- name: DeleteUserVerification :exec
DELETE FROM user_verifications
WHERE
    user_id = $1
`

func (q *Queries) DeleteUserVerification(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserVerification, userID)
	return err
}
